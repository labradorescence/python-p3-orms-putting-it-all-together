import sqlite3

CONN = sqlite3.connect('lib/dogs.db')
CURSOR = CONN.cursor()

class Dog:

    def __init__(self, name, breed, id=None):
        self.id = id
        self.name = name
        self.breed = breed

    pass


    @classmethod #class method affects the whole table, not just one row
    def create_table(cls): #cls take in this class as a parameter

        #google SQL queries
        query = """CREATE TABLE IF NOT EXISTS dogs ( 
                    id INTEGER PRIMARY KEY,
                    name TEXT,
                    breed VARCHAR(250)
                    );"""

        CURSOR.execute(query) #CURSOR takes the `query` and executes it


    @classmethod #class method for the whole class, not only one instance
    def drop_table(cls): #takes in class as an argument
        #query 
        query = """ 
            DROP TABLE IF EXISTS dogs
        """
        CURSOR.execute(query) #CURSOR takes the `query` and executes it


    def save(self): #instance method/ not class method / takes in self / not cls
        #google SQL insert into 

        # notice that I'm not putting ID here bc it's autogenerated
        query = """
            INSERT INTO dogs (name, breed) 
            VALUES (?, ?);
        """

        CURSOR.execute(query, (self.name, self.breed)) #pass in name and breed as arguments 

    @classmethod
    def create(cls, name, breed):
        dog = cls(name, breed) #create an instance 

        dog.save() # take save method that we built already to insert into our table

        return dog #return the object
    

    @classmethod #class method
    #grabbing a row
    def new_from_db(cls, row): #we got this dog class, and one row 
        dog = cls(
            id=row[0], #row at index 0 is id
            name=row[1], #row at index 1 is name
            breed=row[2] #row at index 2 is breed
        )
        print(dog.name, dog.breed)
        return dog
    
    @classmethod
    def get_all(cls):
        sql = """
            SELECT * FROM dogs
        """

        #1. CURSOR.execute(sql) 
        # -- this runs the query but we want to see the row
        #2. CURSOR.execute(sql).fetchall()
        #3. print([one_row for one_row in CURSOR.execute(sql).fetchall()])
        print([cls.new_from_db(one_row) for one_row in CURSOR.execute(sql).fetchall()])
        return [cls.new_from_db(row) for row in CURSOR.execute(sql).fetchall()]

dog1 = Dog("Milk", "Chihuahua1", 1)
dog2 = Dog("Honey", "Chihuahua2", 2)
dog3 = Dog("Ginger", "Chihuahua3", 3)
Dog.create_table()
dog1.save()
dog2.save()
dog3.save()
Dog.get_all()

